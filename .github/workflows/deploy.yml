name: Main workflow

on:
  push:
    branches:
      - main

jobs:
  tests:
    # Разворачиваем окружение:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10"]

    services:
      postgres:
        image: postgres:13.10
        # Указываем имя тестовой базы, имя и пароль пользователя в открытом виде,
        # ведь эта база будет работать только во время прогона тестов
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        # Эта конструкция описывает проверку готовности сервиса postgres
        # Если её не будет, то тесты могут запуститься раньше, чем сервер PostgreSQL
        # В результате тесты опять решат, что базы нет, — и упадут
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    # Копируем код проекта:
    - name: Check out code
      uses: actions/checkout@v3
    # Устанавливаем Python с помощью action:
    - name: Set up Python
      uses: actions/setup-python@v4
    # В action setup-python@v4 передаём параметр — версию Python:
      with:
        python-version: ${{ matrix.python-version }}
    # Обновляем pip, устанавливаем flake8 и flake8-isort, 
    # устанавливаем зависимости проекта:
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install flake8==6.0.0 flake8-isort==6.0.0
        pip install -r ./backend/requirements.txt
    # Запускаем flake8:
    - name: Test with flake8 and django tests
      env:
        DEBUG: True
        SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      # Вызываем flake8 и указываем ему,
      # что нужно проверить файлы только в папке backend/
      # python -m flake8 backend/ - выключил, т.к не хочется исправлять кучу ошибок
      run: |
        cd backend/
        python manage.py test
  
  frontend_tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up nodeJS
      # Это готовый воркфлоу для установки Node.js на раннер
      uses: actions/setup-node@v3
      with:
        # Это параметр воркфлоу, указывающий нужную версию Node.js
        node-version: 18
    - name: Install dependencies
      # Эта команда устанавливает зависимости для фронтенда
      run: |
        cd frontend/
        npm ci
    - name: Test frontend
      # Запускаем тесты
      run: |
        cd frontend/
        npm run test

  build_backend_and_push_to_docker_hub:
    name: Push backend Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        # Получение исходного кода из репозитория:
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        # Установка сборщика контейнеров Docker:
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        # Авторизация на Docker Hub:
        uses: docker/login-action@v2
        # При помощи with передаём в action параметры username и password:
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        # Одновременный билд и пуш образа в Docker Hub:
        uses: docker/build-push-action@v4
        with:
          # Параметр context: ./backend/ указывает, что нужный Dockerfile 
          # находится в ./backend/
          context: ./backend/
          # Параметр push: true указывает, что образ нужно не только собрать,
          # но и отправить на Docker Hub:
          push: true
          # В параметре tags задаётся название и тег для образа.
          # Для каждого пересобранного образа 
          # устанавливаем тег latest, чтобы потом
          # на сервере и в docker-compose.yml не указывать версию образа:
          tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_backend:latest

  build_frontend_and_push_to_docker_hub:
    name: Push frontend Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: frontend_tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_frontend:latest

  build_gateway_and_push_to_docker_hub:
    name: Push nginx Docker image to DockerHub
    runs-on: ubuntu-latest
    needs:
      - tests
      - frontend_tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: ./nginx/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_gateway:latest

  deploy:
    runs-on: ubuntu-latest
    needs: 
      # Дождёмся билда всех фронтенда, бэкенда и гейтвея:
      - build_backend_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
    # Копируем docker-compose.production.yml на продакшен-сервер:
    - name: Copy docker-compose.yml via ssh
      uses: appleboy/scp-action@v0.1.7
    # Передаём параметры для action appleboy/scp-action:
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        source: "docker-compose.production.yml"
        target: "~/kittygram"
    - name: Create .env file on server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          echo "
          # Django settings
          SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}
          DEBUG=False
          ALLOWED_HOSTS=${{ secrets.HOST }},127.0.0.1,localhost

          # Postgres settings
          POSTGRES_DB=kittygram
          POSTGRES_USER=kittygram_user
          POSTGRES_PASSWORD=kittygram_password
          POSTGRES_HOST=postgres
          DB_PORT=5432

          # Media settings
          MEDIA_HOST=${{ secrets.HOST }}

          DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          " > ~/kittygram/.env
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        # Параметр script передаёт в action appleboy/ssh-action команды,
        # которые нужно выполнить на сервере, 
        # с которым установлено соединение:
        script: |
          cd ~/kittygram
          # Выполняет pull образов с Docker Hub
          docker compose --env-file .env -f docker-compose.production.yml pull
          # Перезапускает все контейнеры в Docker Compose
          docker compose --env-file .env -f docker-compose.production.yml down
          docker compose --env-file .env -f docker-compose.production.yml up -d

          # Оставляем время для старта контейнера с базой данных
          sleep 15

          # Выполняет миграции и сбор статики
          docker compose -f docker-compose.production.yml exec backend python manage.py migrate
          docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic --noinput

  auto_tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10"]

    needs: 
      - deploy
    steps:
    # Копируем код проекта:
    - name: Check out code
      uses: actions/checkout@v3
    # Устанавливаем Python с помощью action:
    - name: Set up Python
      uses: actions/setup-python@v4
    # В action setup-python@v4 передаём параметр — версию Python:
      with:
        python-version: ${{ matrix.python-version }}
    # Обновляем pip, устанавливаем зависимости проекта:
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install -r ./backend/requirements.txt
    - name: Run autotests
      env:
        DEBUG: False
        SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
      run: pytest

  send_message:
    runs-on: ubuntu-latest
    needs: 
    - auto_tests
    steps:
    - name: Send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: | 
          Kittigram was deployed successfully by ${{ github.actor }}!
          Commit:  ${{ github.sha }}
          Commit message: ${{ github.event.commits[0].message }}
          Repository: ${{ github.repository }}
          See changes: https://github.com/${{ github.repository }}/commit/${{github.sha}}